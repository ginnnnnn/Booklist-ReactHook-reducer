{"version":3,"sources":["reducers/bookReducer.js","contexts/BookContext.js","components/Nabar.js","components/BookDetail.js","components/BookList.js","components/BookForm.js","App.js","serviceWorker.js","index.js"],"names":["bookReducer","state","action","type","concat","Object","toConsumableArray","title","book","author","id","uuid","filter","BookContext","createContext","BookContextProvider","props","_useReducer","useReducer","localData","localStorage","getItem","JSON","parse","_useReducer2","slicedToArray","books","dispatch","useEffect","setItem","stringify","react_default","a","createElement","Provider","value","children","Navbar","useContext","className","length","BookDetail","_ref","onClick","BookList","map","components_BookDetail","key","BookForm","_useState","useState","_useState2","setTitle","_useState3","_useState4","setAuthor","onSubmit","e","preventDefault","placeholder","required","onChange","target","App","contexts_BookContext","Nabar","components_BookList","components_BookForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75a82571.chunk.js","sourcesContent":["import uuid from 'uuid/v1';\n\nexport const bookReducer = (state, action) => {\n    //state is books array action is an obj name action contain {type:\"\",payload}\n    switch (action.type) {\n        case \"ADD_BOOK\":\n            //in here action is {type:\"ADD_BOOK\",book:{title:\"one piece\",author:\"oda\"}}\n            return [...state, {\n                title: action.book.title,\n                author: action.book.author,\n                id: uuid()\n            }];\n        case \"REMOVE_BOOK\":\n            // in here action is {type:\"REMOVE_BOOK\",id:passing id}\n            return state.filter(book => {\n                return book.id !== action.id\n            });\n        default:\n            return state;\n    }\n}","import React, { createContext, useReducer, useEffect } from 'react';\nimport { bookReducer } from '../reducers/bookReducer';\n\nexport const BookContext = createContext();\n\nconst BookContextProvider = (props) => {\n    const [books, dispatch] = useReducer(bookReducer, [], () => {\n        const localData = localStorage.getItem(\"books\");\n        return localData ? JSON.parse(localData) : [];\n        //check if any books store in local storage and store by parsing with JSON.parse(data);\n    })\n    //const [stateName,dispatch]=useReducer(reducer,initialState)\n    //useReducer has third argument as an function which return a value as initial state\n    //()=>{return [{title:'one piece',author:\"oda\"}]}\n    //in here we use localstorage and useEffect() to store input book\n\n    useEffect(() => {\n        localStorage.setItem('books', JSON.stringify(books))\n        //everytime when books state changed we store in our localstorage \n        //by using JSON.stringif(data),localstorage only take string\n    }, [books])\n\n    return (\n        <BookContext.Provider value={{ books, dispatch }}>\n            {props.children}\n        </BookContext.Provider>\n    );\n}\n\nexport default BookContextProvider;","import React, { useContext } from 'react';\nimport { BookContext } from '../contexts/BookContext';\nconst Navbar = () => {\n    const { books } = useContext(BookContext);\n    return (\n        <div className='navbar'>\n            <h1>Best Monga List</h1>\n            <p>Currently you have {books.length} sets of Monga</p>\n        </div>);\n}\n\nexport default Navbar;","import React, { useContext } from 'react';\nimport { BookContext } from '../contexts/BookContext';\nconst BookDetail = ({ book }) => {\n    const { dispatch } = useContext(BookContext)\n    return (\n        <li onClick={() => dispatch({ type: \"REMOVE_BOOK\", id: book.id })} >\n            <div className='title'>{book.title}</div>\n            <div className='author'>{book.author}</div>\n        </li>\n    );\n}\n\nexport default BookDetail;","import React, { useContext } from 'react';\nimport { BookContext } from '../contexts/BookContext';\nimport BookDetail from './BookDetail';\n\n\nconst BookList = () => {\n    const { books } = useContext(BookContext)\n    return books.length ? (<div className='book-list'>\n        <ul>\n            {books.map(book => {\n                return <BookDetail book={book} key={book.id} />\n            })}\n        </ul>\n    </div>) : (\n            <div className='empty'>no books to read. keep updating</div>\n        )\n}\n\nexport default BookList;","import React, { useContext, useState } from 'react';\nimport { BookContext } from '../contexts/BookContext';\n\nconst BookForm = () => {\n    const [title, setTitle] = useState(\"\")\n    const [author, setAuthor] = useState(\"\")\n\n    const { dispatch } = useContext(BookContext);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        dispatch({ type: \"ADD_BOOK\", book: { title: title, author: author } });\n        setTitle(\"\");\n        setAuthor(\"\");\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type='text'\n                placeholder=\"Book Title\"\n                value={title} required onChange={e => setTitle(e.target.value)} />\n            <input type='text'\n                placeholder=\"Author\"\n                value={author} required onChange={e => setAuthor(e.target.value)} />\n            <input type='submit' value=\"add a book\" />\n        </form>\n    );\n}\n\nexport default BookForm;","import React from 'react';\nimport BookContextProvider from './contexts/BookContext';\nimport Navbar from './components/Nabar';\nimport BookList from './components/BookList';\nimport BookForm from './components/BookForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <Navbar />\n        <BookList />\n        <BookForm />\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}